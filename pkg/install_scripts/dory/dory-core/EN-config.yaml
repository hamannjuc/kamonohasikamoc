app:
  # dory data directory (relative path)
  workDir: dory-data
  # dory run in which docker's directory (absolute path)
  dockerParentWorkDir: /dory-core
  # project definition version control files directory (relative path)
  defDir: dory-data/project-defs
  # project build caches directory (relative path)
  cacheDir: dory-data/caches
  # system UID dory run with
  userID: 1000
  # restful api service port
  apiPort: 9000
  # dory service name
  serviceName: dory-core
  # log output level, options: error, warning, info, debug
  logLevel: debug
  # CORS(Cross-Origin Resource Sharing) enable
  cors: true
  # jwt settings
  jwt:
    # jwt sign
    sign: {{ randAlphaNum 64 | quote }}
    # jwt expire seconds
    expireSeconds: 3600
    # jwt refresh seconds, must less than expireSeconds
    # jwt token minimum validity period equal: expireSeconds - refreshSeconds
    refreshSeconds: 60
  # user password minimum length
  passwordLength: 8
  # forget password reset token validity period hours
  resetTokenExpireHours: 24
  # initial admin user settings
  # if user not exists in openldap, it will create automatically
  # if user exists in openldap, set user to be admin
  adminUser:
    # admin user name, format like: dory-admin
    username: {{ $.dorycore.adminUser.username }}
    # admin user display name, format like: DORY-ADMIN
    name: {{ $.dorycore.adminUser.name }}
    # admin user mail
    mail: {{ $.dorycore.adminUser.mail }}
    # admin user mobile phone number
    mobile: {{ $.dorycore.adminUser.mobile }}
  # which node port range project applications can use
  nodePortRange:
    # node port range start
    nodePortRangeStart: 30100
    # node port range end
    nodePortRangeEnd: 32750
  # pipeline running status watcher settings (seconds)
  runningWatcherInterval:
    # watcher check interval (seconds)
    watcherInterval: 1
    # running status expire interval, must greater than watcherInterval (seconds)
    runningExpireInterval: 2
  # attachment maximum size (M)
  attachmentMaxSize: 4
  # crontab pipeline job check interval (seconds)
  crontabCheckInterval: 5
  # clear work space after pipeline run finish
  clearWorkspace: true
  # test report directory (relative path)
  testReportDir: dory-data/testReport
  # test report view path
  testReportUri: /assets/testReport
  # default avatar view path
  avatarDefaultUri: /avatar/default
  # default avatar full view path
  avatarDefaultUriFull: /avatar/default/avatar.png
  # user avatar directory (relative path)
  avatarDir: dory-data/avatar
  # user avatar view path
  avatarUri: /avatar/user
  # user avatar url prefix
  avatarUrlPrefix: ""
  # request timeout seconds
  requestTimeoutSeconds: 5
  # deploy check interval (seconds)
  deployCheckInterval: 5
  # deploy check maximum times
  deployCheckCountLimit: 30
  # default kubernetes environment name
  defaultEnvName: test
# smtp send mail settings
mail:
  # smtp server host
  host: {{ $.dorycore.mail.host | quote }}
  # smtp port
  port: {{ $.dorycore.mail.port }}
  # smtp user account
  username: {{ $.dorycore.mail.username | quote }}
  # smtp password
  password: {{ $.dorycore.mail.password | quote }}
  # smtp enable SSL
  ssl: {{ $.dorycore.mail.ssl }}
  # smtp sender display name
  from: {{ $.dorycore.mail.from | quote }}
  # smtp mail sender timeout settings (seconds)
  timeoutSeconds: 15
  # reset password view url in mail
  url: {{ $.viewURL }}:{{ $.dory.dorycore.port }}/resetPwd
# redis cache settings
redis:
  # redis host
  host: redis-core-dory
  # redis port
  port: 6379
  # redis password
  password: {{ $.dory.redis.password | quote }}
# mongodb settings
mongodb:
  # mongo host
  host: mongo-core-dory
  # mongo port
  port: 27017
  # mongo user name
  username: root
  # mongo password
  password: {{ $.dory.mongo.password | quote }}
  # mongo database name
  database: dorydb
# docker executor settings
docker:
  {{- if eq $.installMode "kubernetes" }}
  # if docker executors self signed certificates in kubernetes secret, these settings required
  kubernetes:
    # kubernetes api server ip address
    host: {{ $.kubernetes.host | quote }}
    # kubernetes api server port
    port: {{ $.kubernetes.port }}
    # kubernetes api server admin token
    token: {{ $.kubernetes.token | quote }}
    # docker executors self signed certificates store in which kubernetes secret
    secretTls: "{{ $.dory.docker.dockerName }}-tls"
    # docker executors self signed certificates secret in which kubernetes namespace
    namespace: {{ $.dory.namespace | quote }}
  {{- else if eq $.installMode "docker" }}
  # if docker executors self signed certificates store in directory, these settings required
  localCert:
    # ca cert path in docker executor (absolute path)
    caCrtPath: "/certs/ca.crt"
    # tls cert path in docker executor (absolute path)
    tlsCrtPath: "/certs/tls.crt"
    # tls key path in docker executor (absolute path)
    tlsKeyPath: "/certs/tls.key"
  # docker executors number, if docker executors run in docker required
  dockerNumber: {{ $.dory.docker.dockerNumber }}
  {{- end }}
  # docker executor service name
  docker: {{ $.dory.docker.dockerName | quote }}
  # docker executor port
  dockerPort: 2376
# ldap account center settings
ldap:
  # LDAP base DN setting
  baseDN: {{ $.dory.openldap.baseDN | quote}}
  # LDAP server connect url
  server: "ldap://openldap:389"
  # LDAP admin user
  adminCN: "cn=admin,{{ $.dory.openldap.baseDN }}"
  # LDAP admin password
  password: {{ $.dory.openldap.password | quote}}
# git repository settings, support gitlab and gitea
gitRepoConfigs:
    # git repository type, options: gitlab, gitea
  - kind: {{ $.dory.gitRepo.type }}
    # git repository id name, format like: xxx-xxx
    repoName: {{ $.dory.gitRepo.type }}-dory
    # git repository browser access url
    viewUrl: {{ $.viewURL }}:{{ $.dory.gitRepo.port }}
    # git repository internal access url by dory
    {{- if eq $.dory.gitRepo.type "gitea" }}
    url: http://gitea:3000
    {{- else if eq $.dory.gitRepo.type "gitlab" }}
    url: http://gitlab
    {{- end }}
    # git repository admin user name
    username: "PLEASE_INPUT_BY_MANUAL"
    # git repository admin user display name
    name: "PLEASE_INPUT_BY_MANUAL"
    # git repository admin user mail
    mail: "PLEASE_INPUT_BY_MANUAL"
    # git repository admin user password
    password: "PLEASE_INPUT_BY_MANUAL"
    # git repository admin user token
    token: "PLEASE_INPUT_BY_MANUAL"
    # default tag name
    tagDefault: "v0.1.0"
# image repository settings, support harbor
imageRepoConfigs:
    # image repository type, options: harbor
  - kind: {{ $.imageRepo.type }}
    # image repository id name, format like: xxx-xxx
    repoName: {{ $.imageRepo.type }}-dory
    # image repository browser access url
    viewUrl: https://{{ $.imageRepo.domainName }}
    # image repository domain name
    url: {{ $.imageRepo.domainName | quote }}
    # image repository admin user name
    username: admin
    # image repository admin user password
    password: {{ $.imageRepo.password | quote }}
    # image repository api access url by dory
    apiUrl: https://{{ $.imageRepo.domainName }}
# artifact and dependency repository settings, support nexus
artifactRepoConfigs:
    # artifact and dependency repository type, options: nexus
  - kind: {{ $.dory.artifactRepo.type }}
    # artifact and dependency repository id name, format like: xxx-xxx
    repoName: {{ $.dory.artifactRepo.type }}-dory
    # artifact and dependency repository browser access url
    viewUrl: {{ $.viewURL }}:{{ $.dory.artifactRepo.port }}
    # artifact and dependency repository access url by docker executors
    url: http://{{ $.hostIP }}:{{ $.dory.artifactRepo.port }}
    # artifact and dependency repository access ip address, docker executors can connect this repository
    host: {{ $.hostIP | quote }}
    # artifact and dependency repository admin user name
    username: admin
    # artifact and dependency repository admin user password
    password: "Nexus_Pwd_321"
    # artifact and dependency repository public user role name
    publicRole: public-role
    # artifact and dependency repository docker.io docker image proxy url
    dockerHubUrl: {{ $.hostIP }}:{{ $.dory.artifactRepo.portHub }}
    # artifact and dependency repository proxy url with public user authorization
    publicAccountUrl: http://public-user:public-user@{{ $.hostIP }}:{{ $.dory.artifactRepo.port }}
    # public user name which can fetch public dependencies
    publicUser: public-user
    # public user password which can fetch public dependencies
    publicPassword: public-user
    # maven repository proxy path
    maven: repository/maven-group-public/
    # npm repository proxy path
    npm: repository/npm-group-public/
    # pypi repository proxy path
    pip: repository/pypi-group-public/simple
    # gradle repository proxy path
    gradle: repository/maven-group-public/
    # go repository proxy path
    go: repository/go-group-public
# internet proxy settings
proxy:
  # internet proxy url
  url: http://nginx-proxy:1080

# default pipeline settings, when create new project dory will use these settings to create default pipeline
defaultPipeline:
  # branch name
  branchName: develop
  # push event trigger web hook to run pipeline enable
  webhookPushEvent: true
  # tag suffix
  tagSuffix: "dev"
  # default pipeline crontab settings
  pipelineCrons: []
  # default pipeline trigger settings
  pipelineTriggers: []

# demo project package source image settings
demoProjectImageSettings:
  springDemoImage: "hub/openjdk:14-jdk-alpine3.10"
  nodeDemoImage: "hub/node:13.14-alpine3.11"
  pythonDemoImage: "public/python:3.9.9-alpine3.15-dory"
  goDemoImage: "public/alpine:3.15.0-dory"
  ginDemoImage: "public/alpine:3.15.0-dory"

# build step languages and docker image settings
buildDockerEnvs:
  # fetch build dependencies from artifact and dependency repository enable
  artifactRepoDependencyPull: true
  # default build dependencies settings, if not fetch build dependencies from artifact and dependency repository
  defaultBuildDependency:
    # maven build dependencies settings
    maven:
        # ~/.m2/settings.xml repository url
      - url: http://maven.aliyun.com/nexus/content/groups/public/
        # ~/.m2/settings.xml repository id
        id: nexus
        # ~/.m2/settings.xml mirrorOf setting
        mirrorOf: central
    # npm build dependencies settings
    npm:
      # ~/.npmrc repository url
      url: https://registry.npm.taobao.org
    # pypi build dependencies settings
    pip:
      # ~/.pip/pip.conf repository url
      url: https://mirrors.aliyun.com/pypi/simple/
      # ~/.pip/pip.conf trusted-host setting
      trustedHost: mirrors.aliyun.com
    # gradle build dependencies settings
    gradle:
        # ~/.gradle/init.gradle repository url
      - url: https://maven.aliyun.com/repository/jcenter
      - url: https://maven.aliyun.com/repository/google
      - url: https://maven.aliyun.com/repository/central
      - url: https://maven.aliyun.com/repository/gradle-plugin
    # go build dependencies settings
    go:
      # ~/.config/go/env repository url
      url: https://mirrors.aliyun.com/goproxy
  # build docker executor user home directory
  dockerHomeDir: "/home/dory"
  # build docker executor environment settings
  dockerEnvs:
      # build environment name
    - name: maven
      # mount build caches to build docker executor's $HOME directory
      mountHomeDir: true
      # use internet proxy to fetch build dependencies
      enableProxy: false
      # mount extra build caches to build docker executor, if build caches not in $HOME directory
      # for example: go language build cache is in /go/pkg, not in $HOME directory
      mountExtraCacheDirs: []
      # run commands before build
      commandsBeforeBuild: ["pwd", "ls -al"]
      # run commands after build
      commandsAfterCheck: []
      # build environments images settings
      buildEnvs:
          # build environment name
        - buildEnvName: maven-jdk17
          # build environment docker image, relative path in image repository
          image: "public/maven:3.8.3-openjdk-17-dory"
        - buildEnvName: maven-jdk14
          image: "public/maven:3.6.3-jdk-14-dory"
        - buildEnvName: maven-jdk11
          image: "public/maven:3.8.4-jdk-11-dory"
        - buildEnvName: maven-jdk8
          image: "public/maven:3.8.4-jdk-8-dory"
        - buildEnvName: maven
          image: "public/maven:3.8.3-openjdk-17-dory"
    - name: npm
      mountHomeDir: false
      enableProxy: false
      mountExtraCacheDirs: []
      commandsBeforeBuild: ["pwd", "ls -al"]
      commandsAfterCheck: ["rm -rf node_modules"]
      buildEnvs:
        - buildEnvName: npm-node17
          image: "hub/node:17.0.1-alpine3.14"
        - buildEnvName: npm-node15
          image: "hub/node:15.14.0-alpine3.13"
        - buildEnvName: npm-node13
          image: "hub/node:13.14-alpine3.11"
        - buildEnvName: npm
          image: "hub/node:17.0.1-alpine3.14"
    - name: go
      mountHomeDir: false
      enableProxy: false
      mountExtraCacheDirs: ["/go/pkg"]
      commandsBeforeBuild: ["pwd", "ls -al"]
      commandsAfterCheck: []
      buildEnvs:
        - buildEnvName: go-1.17
          image: "public/golang:1.17.3-alpine3.15-dory"
        - buildEnvName: go-1.14
          image: "public/golang:1.14.15-alpine3.13-dory"
        - buildEnvName: go
          image: "public/golang:1.17.3-alpine3.15-dory"
    - name: python
      mountHomeDir: false
      enableProxy: false
      mountExtraCacheDirs: []
      commandsBeforeBuild: ["pwd", "ls -al"]
      commandsAfterCheck: []
      buildEnvs:
        - buildEnvName: python-3.10
          image: "public/python:3.10.0-alpine3.15-dory"
        - buildEnvName: python-3.9
          image: "public/python:3.9.9-alpine3.15-dory"
        - buildEnvName: python
          image: "public/python:3.10.0-alpine3.15-dory"
    - name: gradle
      mountHomeDir: true
      enableProxy: false
      mountExtraCacheDirs: []
      commandsBeforeBuild: ["pwd", "ls -al"]
      commandsAfterCheck: []
      buildEnvs:
        - buildEnvName: gradle-jdk17
          image: "public/gradle:7.3.0-jdk17-dory"
        - buildEnvName: gradle-jdk14
          image: "public/gradle:6.7.0-jdk14-dory"
        - buildEnvName: gradle-jdk11
          image: "public/gradle:7.3.0-jdk11-dory"
        - buildEnvName: gradle-jdk8
          image: "public/gradle:7.3.0-jdk8-dory"
        - buildEnvName: gradle
          image: "public/gradle:7.3.0-jdk17-dory"
    - name: alpine
      mountHomeDir: false
      enableProxy: false
      mountExtraCacheDirs: []
      commandsBeforeBuild: ["pwd", "ls -al"]
      commandsAfterCheck: []
      buildEnvs:
        - buildEnvName: alpine-3.15
          image: "public/alpine:3.15.0-dory"
        - buildEnvName: alpine-3.14
          image: "public/alpine:3.14.3-dory"
        - buildEnvName: alpine
          image: "public/alpine:3.15.0-dory"

# debug component docker images settings
componentDebugEnvs:
  # ssh-debug docker image, relative path in image repository
  sshDebug: "public/sshd-centos:7.9-2009"
  # vnc-debug docker image, relative path in image repository
  vncDebug: "public/vnc-centos:7.9-2009"
