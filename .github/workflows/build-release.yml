name: Go

on:
  push:
    tags:
    - "*"

jobs:
  createRelease:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
    steps:
      - name: Get tag name
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Doryctl ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
      - id: output_upload_url
        run: echo "{{ steps.create_release.outputs.upload_url }}"
      - id: get_upload_url
        run: echo "::set-output name=upload_url::{{ steps.create_release.outputs.upload_url }}"

#  build:
#    needs: createRelease
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        include:
#          - goarch: amd64
#            goos: linux
#          - goarch: amd64
#            goos: darwin
#          - goarch: arm64
#            goos: linux
#          - goarch: arm64
#            goos: darwin
#          - goarch: amd64
#            goos: windows
#    steps:
#      - uses: actions/checkout@master
#      - name: Set go build environment
#        uses: actions/setup-go@v2
#        with:
#          go-version: 1.17
#      - name: Get tag name
#        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
#      - name: Building doryctl
#        working-directory: .
#        run: go mod tidy && go build -o doryctl
#        env:
#          GOOS: ${{ matrix.goos }}
#          GOARCH: ${{ matrix.goarch }}
#      - name: Packaging
#        working-directory: .
#        run: tar czvf doryctl-${{ env.RELEASE_VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.tgz doryctl LICENSE
#      - name: Uploading Release assets
#        if: ${{ !env.ACT }}
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ needs.createRelease.outputs.upload_url }}
#          asset_path: ./doryctl-${{ env.RELEASE_VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.tgz
#          asset_name: doryctl-${{ env.RELEASE_VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.tgz
#          asset_content_type: application/gzip
