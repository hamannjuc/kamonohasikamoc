---
apiVersion: v1
kind: Namespace
metadata:
  name: {{ $.kubernetes.namespace }}
  labels:
    ns: {{ $.kubernetes.namespace }}

---
{{- $harborDockerConfigJson := cat "{ \"auths\": { " ($.imageRepo.domainName | quote) ": { \"username\": \"admin\", \"password\": " ($.imageRepo.password | quote) ", \"email\": \"admin@example.com\", \"auth\": " (cat "admin:" $.imageRepo.password | nospace | b64enc | quote) " } } }" }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $.imageRepo.domainName }}
  namespace: {{ $.kubernetes.namespace }}
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: |
    {{ $harborDockerConfigJson | b64enc | nindent 4 }}

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: project-data-pv
  labels:
    app: project-data
  annotations:
    volume.beta.kubernetes.io/storage-class: "project-data-pv"
spec:
  capacity:
    storage: 500Gi
  accessModes:
    - ReadWriteMany
  {{- if $.kubernetes.pvConfigLocal.localPath }}
  hostPath:
    path: {{ $.kubernetes.pvConfigLocal.localPath }}
    type: DirectoryOrCreate
  {{- else if $.kubernetes.pvConfigCephfs.cephPath }}
  cephfs:
    path: {{ $.kubernetes.pvConfigCephfs.cephPath }}
    user: {{ $.kubernetes.pvConfigCephfs.cephUser }}
    monitors:
    {{- range $_, $monitor := $.kubernetes.pvConfigCephfs.cephMonitors }}
    - {{ $monitor | quote }}
    {{- end }}
    secretRef:
      name: cephfs-secret
      namespace: {{ $.kubernetes.project.projectInfo.projectName }}
    readOnly: false
  {{- else if $.kubernetes.pvConfigNfs.nfsServer }}
  nfs:
    path: {{ $.kubernetes.pvConfigNfs.nfsPath }}
    server: {{ $.kubernetes.pvConfigNfs.nfsServer }}
    readOnly: false
  {{- end }}

{{- if $.kubernetes.pvConfigCephfs.cephPath }}
---
apiVersion: v1
kind: Secret
metadata:
  name: cephfs-secret
  namespace: {{ $.kubernetes.namespace }}
data:
  key: {{ $.kubernetes.pvConfigCephfs.cephSecret | b64enc }}
{{- end }}

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: project-data-pvc
  namespace: {{ $.kubernetes.namespace }}
spec:
  accessModes:
    - ReadWriteMany
  volumeMode: Filesystem
  resources:
    requests:
      storage: 500Gi
  storageClassName: project-data-pv
  selector:
    matchLabels:
      app: project-data

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: project-data-alpine
  name: project-data-alpine
  namespace: {{ $.kubernetes.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: project-data-alpine
  serviceName: project-data-alpine
  template:
    metadata:
      labels:
        app: project-data-alpine
    spec:
      containers:
        - command:
            - tail
            - -f
            - /dev/null
          image: {{ $.imageRepo.domainName }}/public/alpine:3.15.0-dory
          imagePullPolicy: IfNotPresent
          name: project-data-alpine
          volumeMounts:
            - mountPath: /etc/timezone
              name: timezone
            - mountPath: /etc/localtime
              name: localtime
            - mountPath: /project-data
              name: project-data-pvc
              subPath: .
      imagePullSecrets:
        - name: {{ $.imageRepo.domainName }}
      volumes:
        - hostPath:
            path: /etc/timezone
            type: File
          name: timezone
        - hostPath:
            path: /etc/localtime
            type: File
          name: localtime
        - name: project-data-pvc
          persistentVolumeClaim:
            claimName: project-data-pvc
